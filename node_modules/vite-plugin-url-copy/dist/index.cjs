"use strict";const utils=require("consola/utils"),l=require("consola"),uqr=require("uqr"),name="vite-plugin-url-copy",version="1.1.4",log=console.log;function isObject(t){return Object.prototype.toString.call(t)==="[object Object]"}function $sleep(t=0){return new Promise(e=>{setTimeout(()=>{e()},t)})}async function $catch(t){try{return await t()}catch(e){return Promise.reject(e)}}let a={};function $diffConfigChange(t){let e=!1;function r(n,p){for(const d of Object.keys(n))if(isObject(n[d])){const u=r(n[d],p[d]);if(u)return u}else if(n[d]!==p[d])return e=!0,e;return e}return r(t,a),e&&(a=t),e}const f=10;let i=0;async function getUrls(t){const e=t.resolvedUrls;if(i>=f)throw new Error("timeout");return e?(i=0,e):(i++,await $sleep(),getUrls(t))}const o=[];function debugPush(...t){o.push(...t)}const s=utils.colorize("blue"," vite-plugin-url-copy_debug ");function debugOutput(t){if(!t)return;const e=o.length;let r="";for(const[n,p]of o.entries())r+=utils.colorize("blue",p),n!==e-1&&(r+=`

`);log(`
`),l.box({title:s,message:r,style:{padding:1,borderColor:"gray",borderStyle:"rounded"}}),o.length=0}const onCopyWrite=(t,e)=>{const{custom:r,mode:n,disabled:p,color:d}=e.copy,u=e.debug;if(!p)return $catch(async()=>{let c="",g=!1;typeof r=="string"&&r&&(g=!0,c=r),typeof r=="function"&&(g=!0,c=r(t[n][0])),c||(c=t[n][0]);const y=g?"cutsom":n;if(u&&debugPush(`copy: ${y} - ${c}`,`copy: ${JSON.stringify(e.copy)}`),!c){await $sleep(),l.consola.warn(`url-copy: ${n} mode URL is undefined, Please check your vite configuration.`);return}return await(await import("clipboardy")).default.write(c),log(utils.colorize("green",`
  \u2714 `),utils.colorize(d,`\xB7${y}\xB7 already copied to clipboard - ${c} `)),c}).catch(c=>{l.consola.warn(`url-copy: ${c}`)})},NETWORK="network",onQRCode=(t,e)=>{const{custom:r,disabled:n,color:p}=e.qrcode,d=e.debug;if(n)return;let u="",c=!1;if(typeof r=="string"&&r&&(c=!0,u=r),typeof r=="function"&&(c=!0,u=r(t[NETWORK][0])),u||(u=t[NETWORK][0]),d&&debugPush(`qrcode: ${c?"cutsom":NETWORK} - ${u}`,`qrcode: ${JSON.stringify(e.copy)}`),!u){l.warn("url-copy: QR-Code uses a network URL, Please check your vite configuration.");return}const g=generateQRCode(u);let y="";try{y=[...g].map((b,w)=>(w||(b=`	${b}`),b===`
`&&(b=`${b}	`),b)).join("")}catch{y=g}log(utils.colorize("green",`
  \u2714 `),utils.colorize(p,`\xB7QRCode\xB7 of the ${NETWORK} - ${u} `),`
`),log(utils.colorize(p,y))};function generateQRCode(t){return uqr.renderUnicodeCompact(t,{ecc:"L",border:1})}const defaultPluginOptions={copy:{disabled:!1,mode:"local",custom:"",color:"green"},qrcode:{disabled:!0,custom:"",color:"green"},disabled:!1,debug:!1};function resolveOptions(t){const{disabled:e,copy:r={},qrcode:n={},debug:p}=t,{disabled:d,copy:u,qrcode:c,debug:g}=defaultPluginOptions;return{copy:{...u,...r},qrcode:{...c,...n},disabled:e??d,debug:p??g}}function O(t={}){const e=resolveOptions(t);return{name:"server-url-copy",configureServer(r){if(e.disabled)return;const n=r.listen,p=r;p.listen=function(...d){const[u,c]=d;return $catch(async()=>{const g=await n.apply(this,d),y=await getUrls(g);return $catch(async()=>{const b=g.config.server.port,w=$diffConfigChange({port:b,...e});c&&!w||(await $sleep(),log(utils.colorize("green",`
 \u26A1${name.toLocaleUpperCase()} v${version}`)),await onCopyWrite(y,e),onQRCode(y,e),debugOutput(e.debug))}),g})}},configurePreviewServer(r){e.disabled||r.httpServer.once("listening",()=>{$catch(async()=>{await $sleep(),log(utils.colorize("green",`
 \u26A1${name.toLocaleUpperCase()} v${version}`));const n=await getUrls(r);await onCopyWrite(n,e),onQRCode(n,e),debugOutput(e.debug)})})}}}module.exports=O;
